package root;
/*
 * GeomPanel.java
 *
 * Created on 22 juin 2003, 22:21
 * the code source is distributed under the GPL.
 * Please see http://www.fsf.org/copyleft/gpl.html 
 */


import expressions.*;
import java.awt.*;
import java.util.*;
import display.*;
import static java.awt.RenderingHints.*;

/**
 *
 * @author  Patrice Maupou
 */
public class GeomPanel extends Panel {
   
  /** Creates new form GeomPanel */
  public GeomPanel() {
    initComponents();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setLayout(new java.awt.BorderLayout());
  }// </editor-fold>//GEN-END:initComponents

  @Override
public void paint(java.awt.Graphics g) {
    if(img != null) {
      img.getGraphics().drawRect(0, 0, getSize().width-1, getSize().height-1); 
      g.drawImage(img, 0, 0, this);
    }
    setVisible(true);    
  }
  
  @Override
public void update(java.awt.Graphics g) {
    paint(g);
  }    
  
    
   public Image getImg() {
    return img;
  }
  
  public void setImg(Image img) {
    this.img = img;
  }
 
  /**
   * recrée le repère au centre du cadre
   */
  public void updateImg() {
    int w = getSize().width, h = getSize().height;
    img = createImage(w, h);    
    imgbkg = createImage(w, h);
    if(img == null) return;
    base = new GBase(new Rectangle(getSize()), 0);
    g = img.getGraphics();
    g2 = (Graphics2D)g;
    g2.setRenderingHint(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON);
    g2.setRenderingHint(KEY_TEXT_ANTIALIASING, VALUE_TEXT_ANTIALIAS_OFF);
  }
 
  /** efface puis dessine la figure
   * @param fig 
   * @param start ajoute au dessin les éléments à partir de start
   */
  public synchronized void drawFig(AbstractList<GObject> fig, int start, int endfigbkg) {
    if(img == null) return;
    g.setClip(0, 0, getSize().width, getSize().height);
    if(start > 0) {
      g.drawImage(imgbkg, 0, 0, this); // les éléments fixes de imgbkg copiés dans img
    }
    else {
      g.clearRect(0, 0, getSize().width, getSize().height);
      if(endfigbkg == -1) endfigbkg = fig.size();
    }    
    for(int i = start; i < fig.size(); i++) { // objets pouvant changer
      GObject gobj = fig.get(i);
      if(gobj.base != null) g.setClip(gobj.base.clip);
      areas.clear();
      exprs.clear();
      gobj.paint(g);
      if(i == endfigbkg-1 && start == 0) {
        imgbkg.getGraphics().drawImage(img, 0, 0, this);
      }
    }
    repaint();
  }
  
  
  public ArrayList<Expression> getExprs() {
    return exprs;
  }
  
  public ArrayList<Rectangle> getAreas() {
    return areas;
  }

  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  
  public GBase base;
  private Image img, imgbkg;
  
  private Graphics g;
  private Graphics2D g2;
  private ArrayList<Expression> exprs = new ArrayList<Expression>();
  private ArrayList<Rectangle> areas = new ArrayList<Rectangle>();


}
